{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","useState","calc","setCalc","result","setResult","ops","updateCalc","value","includes","slice","toString","eval","createDigits","digits","i","push","onClick","calculate","deleteLast","className"],"mappings":"wLAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,K,gmBCfA,SAASY,MAEN,cAAuBG,oDAAS,IAAhC,6LAAOC,KAAP,cAAYC,QAAZ,cACA,WAAyBF,oDAAS,IAAlC,8LAAMG,OAAN,cAAaC,UAAb,cAEMC,IAAI,CAAC,IAAI,IAAI,IAAI,IAAI,KAErBC,WAAa,SAAbA,WAAcC,OAEfF,IAAIG,SAASD,QAAiB,KAAPN,MACvBI,IAAIG,SAASD,QAAUF,IAAIG,SAASP,KAAKQ,OAAO,GAAGC,cAGtDR,QAAQD,KAAKM,OACTF,IAAIG,SAASD,QAEfH,UAAUO,KAAKV,KAAKM,OAAOG,cAK1BE,aAAe,WAEnB,IADA,IAAMC,EAAS,GADU,WAEjBC,GAEJD,EAAOE,KACL,qEAASC,QAAS,kBAAIV,WAAWQ,EAAEJ,aAAnC,SACcI,GAAJA,KAJRA,EAAE,EAAEA,EAAE,GAAGA,IACd,EADKA,GAON,OAAOD,GAIJI,UAAW,SAAXA,YACLf,QAAQS,KAAKV,MAAMS,aAGfQ,WAAa,WACf,GAAW,IAARjB,KAAH,CAEA,IAAMM,EAAMN,KAAKS,WAAWD,MAAM,GAAG,GACrCP,QAAQK,KAIZ,OAIE,kEAAKY,UAAU,MAAf,SACE,mEAAKA,UAAU,aAAf,UACE,mEAAKA,UAAU,UAAf,UAEGhB,OAAS,kFAAQA,OAAR,OAAwB,GAEhCF,MAAQ,KAEZ,mEAAKkB,UAAU,YAAf,UACE,qEAAQH,QAAS,kBAAIV,WAAW,MAAhC,eACA,qEAAQU,QAAS,kBAAIV,WAAW,MAAhC,eACA,qEAAQU,QAAS,kBAAIV,WAAW,MAAhC,eACA,qEAAQU,QAAS,kBAAIV,WAAW,MAAhC,eACA,qEAAQU,QAASE,WAAjB,oBAGF,mEAAKC,UAAU,SAAf,UACGP,eACF,qEAAQI,QAAS,kBAAIV,WAAW,MAAhC,eACA,qEAAQU,QAAS,kBAAIV,WAAW,MAAhC,eACA,qEAAQU,QAASC,UAAjB,uBAWMpB,4B","file":"static/js/main.c3e23f7a.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {useState} from 'react';\nfunction App() {\n\n   const [calc,setCalc] = useState(\"\");\n   const[result,setResult]= useState(\"\");\n\n   const ops=['/','*','+','-','.'];\n\n   const updateCalc = (value) =>{\n\n     if(ops.includes(value) && calc==='' ||\n        ops.includes(value) && ops.includes(calc.slice(-1),toString())\n        \n     ) {return;}\n     setCalc(calc+value);\n     if(!ops.includes(value))\n     {\n       setResult(eval(calc+value).toString());\n     }\n   } \n\n\n  const createDigits = () => {\n    const digits = [] ;\n    for(let i=1;i<10;i++)\n      {\n        digits.push(\n          <button  onClick={()=>updateCalc(i.toString()\n            )} key={i}>{i}</button>\n        )\n      }\n      return digits;\n   }\n\n\n   const calculate =()=>{\n    setCalc(eval(calc).toString());\n  \n  }\n  const deleteLast = () =>{\n      if(calc == '')\n        return ;\n      const value=calc.toString().slice(0,-1);\n      setCalc(value);\n  }\n  \n\n  return (\n     \n\n\n    <div className=\"App\">\n      <div className=\"calculator\">\n        <div className=\"display\">\n\n          {result ? <span>({result})</span>:''}\n    \n          { calc || 0}\n        </div>\n        <div className=\"operators\">\n          <button onClick={()=>updateCalc('/')}>/</button>\n          <button onClick={()=>updateCalc('*')}>*</button>\n          <button onClick={()=>updateCalc('+')}>+</button>\n          <button onClick={()=>updateCalc('-')}>-</button>\n          <button onClick={deleteLast}>DEL</button>\n\n        </div>\n        <div className=\"digits\"> \n          {createDigits()}\n         <button onClick={()=>updateCalc('0')}>0</button>\n         <button onClick={()=>updateCalc('.')}>.</button>\n         <button onClick={calculate}>=</button>\n         \n\n            \n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}